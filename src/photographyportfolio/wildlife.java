/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package photographyportfolio;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author shigvan
 */
public class wildlife extends javax.swing.JFrame {
    
    private List<byte[]> imageBytesList = new ArrayList<>();
    private List<String> nameList = new ArrayList<>();
    private JLabel[] imageLabels = new JLabel[5];
    private JLabel[] nameLabels = new JLabel[5];
    private List<String> usernameList = new ArrayList<>();
    
     private List<Integer> ratingList = new ArrayList<>();
    private List<Integer> ratingList2 = new ArrayList<>();
    private List<Integer> ratingList3 = new ArrayList<>();
    private List<Integer> ratingList4 = new ArrayList<>();
    private List<Integer> ratingList5 = new ArrayList<>();
    /**
     * Creates new form wildlife
     */
    public wildlife() throws SQLException, IOException {
        initComponents();
        imageLabels[0] = img1;
        imageLabels[1] = img2;
        imageLabels[2] = img3;
        imageLabels[3] = img4;
        nameLabels[0] = name1;
        nameLabels[1] = name2;
        nameLabels[2] = name3;
        nameLabels[3] = name4;
        
       
        fetchImageDataFromDatabase();
        updateLabelsBasedOnData();
        fetchnameDataFromDatabase();
        updatenameLabelsBasedOnData();
        fetchusernameDataFromDatabase();
        
        int size = usernameList.size();
       
       if(size==0){
       
       }
       else if(size==1){
       fetchuser1RatingFromDatabase();
       }
       else if(size==1){
        fetchuser1RatingFromDatabase();
        
       }
       else if(size==2){
        fetchuser1RatingFromDatabase();
        fetchuser2RatingFromDatabase();
      
       }
       else if(size==3){
        fetchuser1RatingFromDatabase();
        fetchuser2RatingFromDatabase();
       fetchuser3RatingFromDatabase();
       
       }
       else if(size==4){
        fetchuser1RatingFromDatabase();
        fetchuser2RatingFromDatabase();
       fetchuser3RatingFromDatabase();
       fetchuser4RatingFromDatabase();
       }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jButton24 = new javax.swing.JButton();
        jButton25 = new javax.swing.JButton();
        jButton26 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jButton28 = new javax.swing.JButton();
        name4 = new javax.swing.JLabel();
        name3 = new javax.swing.JLabel();
        name2 = new javax.swing.JLabel();
        name1 = new javax.swing.JLabel();
        img4 = new javax.swing.JLabel();
        img3 = new javax.swing.JLabel();
        img1 = new javax.swing.JLabel();
        img2 = new javax.swing.JLabel();
        starr1 = new javax.swing.JLabel();
        stara1 = new javax.swing.JLabel();
        starb1 = new javax.swing.JLabel();
        starc1 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        clientusername = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel12.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton24.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton24.setText("ALL");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton24, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, -7, -1, 60));

        jButton25.setBackground(new java.awt.Color(0, 255, 255));
        jButton25.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton25.setText("WILDLIFE");
        jPanel12.add(jButton25, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 0, 110, 50));

        jButton26.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton26.setText("WEDDING");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton26, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 0, -1, 60));

        jButton27.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton27.setText("SOCIAL EVENTS");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton27, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 0, -1, 60));

        jButton28.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton28.setText("SPORTS");
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton28, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 0, -1, 60));

        jPanel11.add(jPanel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 800, 50));
        jPanel11.add(name4, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 260, -1, -1));
        jPanel11.add(name3, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 260, -1, -1));
        jPanel11.add(name2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, -1, -1));
        jPanel11.add(name1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, -1, -1));

        img4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                img4MouseClicked(evt);
            }
        });
        jPanel11.add(img4, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 150, 90, 90));

        img3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                img3MouseClicked(evt);
            }
        });
        jPanel11.add(img3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 150, 90, 90));

        img1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                img1MouseClicked(evt);
            }
        });
        jPanel11.add(img1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 90, 90));

        img2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                img2MouseClicked(evt);
            }
        });
        jPanel11.add(img2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 150, 80, 90));
        jPanel11.add(starr1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, 70, -1));
        jPanel11.add(stara1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, 80, -1));
        jPanel11.add(starb1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 280, 70, -1));
        jPanel11.add(starc1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 280, 70, -1));

        jButton6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton6.setText("join with us");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel11.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photographyportfolio/photoport (5).png"))); // NOI18N
        jPanel11.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -30, 820, 610));

        clientusername.setText("jLabel4");
        jPanel11.add(clientusername, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 20, -1, -1));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 818, Short.MAX_VALUE)
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 806, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 602, Short.MAX_VALUE)
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 818, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 602, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateLabelsBasedOnData() {
        int numLabels = imageBytesList.size();
        
        for (int i = 0; i < numLabels && i < imageLabels.length; i++) {
            byte[] imageBytes = imageBytesList.get(i);
            ImageIcon imageIcon = new ImageIcon(imageBytes);
    
    
            int labelWidth = imageLabels[i].getWidth();
            int labelHeight = imageLabels[i].getHeight();

            Image image = imageIcon.getImage();
            Image scaledImage = image.getScaledInstance(labelWidth, labelHeight, Image.SCALE_SMOOTH);
            ImageIcon scaledIcon = new ImageIcon(scaledImage);
            imageLabels[i].setIcon(scaledIcon);
        }
       
       
    }
     
     private void updatenameLabelsBasedOnData(){
     int unameLabels = nameList.size();
        
      for (int i = 0; i < unameLabels && i < nameLabels.length; i++) {
            String textData = nameList.get(i);
            nameLabels[i].setText(textData);
        }

     }
    
     private void fetchImageDataFromDatabase() throws java.sql.SQLException {
         java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:mysql://localhost:3306/portfolio", "root", "root");
         java.sql.Statement stm = conn.createStatement();
         // Create a table named 'images' with a column 'image_data' in your SQLite database
         // The table should have rows with image data
         // Execute a query to retrieve image data from the 'images' table
         java.sql.ResultSet resultSet = stm.executeQuery("SELECT image FROM images where category='wildlife'");
         while (resultSet.next()) {
             byte[] imageBytes = resultSet.getBytes("image");
             imageBytesList.add(imageBytes);
         }
    }
    
     private void fetchnameDataFromDatabase() throws java.sql.SQLException {
         java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:mysql://localhost:3306/portfolio", "root", "root");
         java.sql.Statement stm = conn.createStatement();
         // Create a table named 'images' with a column 'image_data' in your SQLite database
         // The table should have rows with image data
         // Execute a query to retrieve image data from the 'images' table
         java.sql.ResultSet resultSet = stm.executeQuery("SELECT fname FROM images where category='wildlife'");
         while (resultSet.next()) {
            String username = resultSet.getString("fname");
             nameList.add(username);
         }
    }
    
      private void fetchusernameDataFromDatabase() throws java.sql.SQLException {
         java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:mysql://localhost:3306/portfolio", "root", "root");
         java.sql.Statement stm = conn.createStatement();
         // Create a table named 'images' with a column 'image_data' in your SQLite database
         // The table should have rows with image data
         // Execute a query to retrieve image data from the 'images' table
         java.sql.ResultSet resultSet = stm.executeQuery("SELECT username FROM images where category='wildlife'");
         while (resultSet.next()) {
            String username = resultSet.getString("username");
             usernameList.add(username);
         }
    }
    
    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
sports sportsFrame = null;
        try {
            sportsFrame = new sports();
        } catch (SQLException ex) {
            Logger.getLogger(wildlife.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(wildlife.class.getName()).log(Level.SEVERE, null, ex);
        }
        sportsFrame.setVisible(true);
        sportsFrame.pack();
        sportsFrame.setLocationRelativeTo(sportsFrame);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton28ActionPerformed

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
wedding weddingFrame = null;
        try {
            weddingFrame = new wedding();
        } catch (SQLException ex) {
            Logger.getLogger(wildlife.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(wildlife.class.getName()).log(Level.SEVERE, null, ex);
        }
        weddingFrame.setVisible(true);
        weddingFrame.pack();
        weddingFrame.setLocationRelativeTo(weddingFrame);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton26ActionPerformed

    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
social socialFrame = null;
        try {
            socialFrame = new social();
        } catch (SQLException ex) {
            Logger.getLogger(wildlife.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(wildlife.class.getName()).log(Level.SEVERE, null, ex);
        }
        socialFrame.setVisible(true);
        socialFrame.pack();
        socialFrame.setLocationRelativeTo(socialFrame);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton27ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
Registartion  RegistartionFrame = new  Registartion();
        RegistartionFrame.setVisible(true);
        RegistartionFrame.pack();
        RegistartionFrame.setLocationRelativeTo(RegistartionFrame);
        this.dispose();              // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
          // TODO add your handling code here:
          Mainpage MainpageFrame = null;
        try {
            MainpageFrame = new Mainpage();
        } catch (SQLException ex) {
            Logger.getLogger(sports.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(wildlife.class.getName()).log(Level.SEVERE, null, ex);
        }
        MainpageFrame.setVisible(true);
        MainpageFrame.pack();
        MainpageFrame.setLocationRelativeTo(MainpageFrame);
        this.dispose(); 
    }//GEN-LAST:event_jButton24ActionPerformed

    private void img1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_img1MouseClicked
        // TODO add your handling code here:
        String usernamefor = usernameList.get(0);
        userinfo userinfopage = new userinfo(usernamefor);
        userinfopage.usernamelabel.setText(usernameList.get(0));
        userinfopage.setVisible(true);
        userinfopage.pack();
        userinfopage.setLocationRelativeTo(userinfopage); 
    }//GEN-LAST:event_img1MouseClicked

    private void img2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_img2MouseClicked
        // TODO add your handling code here:
        String usernamefor = usernameList.get(1);
        userinfo userinfopage = new userinfo(usernamefor);
        userinfopage.usernamelabel.setText(usernameList.get(1));
        userinfopage.setVisible(true);
        userinfopage.pack();
        userinfopage.setLocationRelativeTo(userinfopage); 
    }//GEN-LAST:event_img2MouseClicked

    private void img3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_img3MouseClicked
        // TODO add your handling code here:
        String usernamefor = usernameList.get(2);
        userinfo userinfopage = new userinfo(usernamefor);
        userinfopage.usernamelabel.setText(usernameList.get(2));
        userinfopage.setVisible(true);
        userinfopage.pack();
        userinfopage.setLocationRelativeTo(userinfopage); 
    }//GEN-LAST:event_img3MouseClicked

    private void img4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_img4MouseClicked
        // TODO add your handling code here:
        String usernamefor = usernameList.get(3);
        userinfo userinfopage = new userinfo(usernamefor);
        userinfopage.usernamelabel.setText(usernameList.get(3));
        userinfopage.setVisible(true);
        userinfopage.pack();
        userinfopage.setLocationRelativeTo(userinfopage); 
    }//GEN-LAST:event_img4MouseClicked

     private void fetchuser1RatingFromDatabase() throws java.sql.SQLException, IOException {
         java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:mysql://localhost:3306/portfolio", "root", "root");
         java.sql.Statement stm = conn.createStatement();
         
         String usernameforRating =usernameList.get(0);
         
         java.sql.ResultSet resultSet = stm.executeQuery("SELECT star_rating FROM reviews WHERE username = '" + usernameforRating + "'");
         while (resultSet.next()) {
             int rate = resultSet.getInt("star_rating");
             ratingList.add(rate);
         }
     
         int average = calculateAverage(ratingList);
         System.out.print(average);
         // Define the path to the image you want to display
    String nostar = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\nostar.png";
    String star1 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star.png";
    String star2 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star2.png";
    String star3 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star3.png";
    String star4 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star4.png";
    String star5 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star5.png";
    
    
        if (average == 0) {
        Image image = ImageIO.read(new File(nostar));
//        image = image.getScaledInstance(starr1.getWidth(), starr1.getHeight(), Image.SCALE_SMOOTH);
        starr1.setIcon(new ImageIcon(image));
        
        }
        else if (average == 1) {
        Image image = ImageIO.read(new File(star1));
//        image = image.getScaledInstance(starr1.getWidth(), starr1.getHeight(), Image.SCALE_SMOOTH);
        starr1.setIcon(new ImageIcon(image));
        
        } else if (average == 2) {

        Image image = ImageIO.read(new File(star2));

        starr1.setIcon(new ImageIcon(image));
        } else if (average == 3) {

        Image image = ImageIO.read(new File(star3));

        starr1.setIcon(new ImageIcon(image));
        } else if (average == 4) {
        Image image = ImageIO.read(new File(star4));
//       
        starr1.setIcon(new ImageIcon(image));
//        
        
            }
        else if (average == 5){
        Image image = ImageIO.read(new File(star5));
//        image = image.getScaledInstance(starr1.getWidth(), starr1.getHeight(), Image.SCALE_SMOOTH);
        starr1.setIcon(new ImageIcon(image));
        }
     
     
    }
     public static int calculateAverage(List<Integer> ratingList) {
        if (ratingList.isEmpty()) {
            return 0; // Handle the case when the list is empty.
        }

        int sum = 0;
        for (int number : ratingList) {
            sum += number;
        }

        return sum / ratingList.size(); // The result is an integer.
    }
     
    private void fetchuser2RatingFromDatabase() throws java.sql.SQLException, IOException {
         java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:mysql://localhost:3306/portfolio", "root", "root");
         java.sql.Statement stm = conn.createStatement();
         
         String usernameforRating =usernameList.get(1);
         
         java.sql.ResultSet resultSet = stm.executeQuery("SELECT star_rating FROM reviews WHERE username = '" + usernameforRating + "'");
         while (resultSet.next()) {
             int rate = resultSet.getInt("star_rating");
             ratingList2.add(rate);
            }
         
         int average = calculateAverage2(ratingList2);
         System.out.print(average);
         // Define the path to the image you want to display
    String nostar = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\nostar.png";
    String star1 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star.png";
    String star2 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star2.png";
    String star3 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star3.png";
    String star4 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star4.png";
    String star5 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star5.png";
    if (average == 0) {
        Image image = ImageIO.read(new File(nostar));
//        image = image.getScaledInstance(starr1.getWidth(), starr1.getHeight(), Image.SCALE_SMOOTH);
        stara1.setIcon(new ImageIcon(image));
        
        }    
    else if (average == 1) {
        Image image = ImageIO.read(new File(star1));
//        image = image.getScaledInstance(starr1.getWidth(), starr1.getHeight(), Image.SCALE_SMOOTH);
        stara1.setIcon(new ImageIcon(image));
        
        } else if (average == 2) {

        Image image = ImageIO.read(new File(star2));

        stara1.setIcon(new ImageIcon(image));
        } else if (average == 3) {

        Image image = ImageIO.read(new File(star3));

        stara1.setIcon(new ImageIcon(image));
        } else if (average == 4) {
        Image image = ImageIO.read(new File(star4));
//       
        stara1.setIcon(new ImageIcon(image));
//        
        
            }
        else if (average == 5){
        Image image = ImageIO.read(new File(star5));
//        image = image.getScaledInstance(starr1.getWidth(), starr1.getHeight(), Image.SCALE_SMOOTH);
        stara1.setIcon(new ImageIcon(image));
        }
    }
    public static int calculateAverage2(List<Integer> ratingList2) {
        if (ratingList2.isEmpty()) {
            return 0; // Handle the case when the list is empty.
        }

        int sum = 0;
        for (int number : ratingList2) {
            sum += number;
        }

        return sum / ratingList2.size(); // The result is an integer.
    }
    
    private void fetchuser3RatingFromDatabase() throws java.sql.SQLException, IOException {
         java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:mysql://localhost:3306/portfolio", "root", "root");
         java.sql.Statement stm = conn.createStatement();
         
         String usernameforRating =usernameList.get(2);
         
         java.sql.ResultSet resultSet = stm.executeQuery("SELECT star_rating FROM reviews WHERE username = '" + usernameforRating + "'");
         while (resultSet.next()) {
             int rate = resultSet.getInt("star_rating");
             ratingList3.add(rate);
         }
         
         int average = calculateAverage3(ratingList3);
         System.out.print(average);
    String nostar = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\nostar.png";
    String star1 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star.png";
    String star2 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star2.png";
    String star3 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star3.png";
    String star4 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star4.png";
    String star5 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star5.png";
    if (average == 0) {
        Image image = ImageIO.read(new File(nostar));
//        image = image.getScaledInstance(starr1.getWidth(), starr1.getHeight(), Image.SCALE_SMOOTH);
        starb1.setIcon(new ImageIcon(image));
        
        }   
        else if (average == 1) {
        Image image = ImageIO.read(new File(star1));
//        image = image.getScaledInstance(starr1.getWidth(), starr1.getHeight(), Image.SCALE_SMOOTH);
        starb1.setIcon(new ImageIcon(image));
        
        } else if (average == 2) {

        Image image = ImageIO.read(new File(star2));

        starb1.setIcon(new ImageIcon(image));
        } else if (average == 3) {

        Image image = ImageIO.read(new File(star3));

        starb1.setIcon(new ImageIcon(image));
        } else if (average == 4) {
        Image image = ImageIO.read(new File(star4));
//       
        starb1.setIcon(new ImageIcon(image));
//        
        
            }
        else if (average == 5){
        Image image = ImageIO.read(new File(star5));
//        image = image.getScaledInstance(starr1.getWidth(), starr1.getHeight(), Image.SCALE_SMOOTH);
        starb1.setIcon(new ImageIcon(image));
        }
    }
    public static int calculateAverage3(List<Integer> ratingList3) {
        if (ratingList3.isEmpty()) {
            return 0; // Handle the case when the list is empty.
        }

        int sum = 0;
        for (int number : ratingList3) {
            sum += number;
        }

        return sum / ratingList3.size(); // The result is an integer.
    }
    private void fetchuser4RatingFromDatabase() throws java.sql.SQLException, IOException {
         java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:mysql://localhost:3306/portfolio", "root", "root");
         java.sql.Statement stm = conn.createStatement();
         
         String usernameforRating =usernameList.get(3);
         
         java.sql.ResultSet resultSet = stm.executeQuery("SELECT star_rating FROM reviews WHERE username = '" + usernameforRating + "'");
         while (resultSet.next()) {
             int rate = resultSet.getInt("star_rating");
             ratingList4.add(rate);
         }
         
         int average = calculateAverage4(ratingList4);
         System.out.print(average);
         // Define the path to the image you want to display
    String nostar = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\nostar.png";
    String star1 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star.png";
    String star2 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star2.png";
    String star3 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star3.png";
    String star4 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star4.png";
    String star5 = "C:\\\\Users\\\\User\\\\Desktop\\\\Soham mini\\\\Photographyportfolio\\\\src\\\\photographyportfolio\\\\star5.png";
    
    if (average == 0) {
        Image image = ImageIO.read(new File(nostar));
//        image = image.getScaledInstance(starr1.getWidth(), starr1.getHeight(), Image.SCALE_SMOOTH);
        starc1.setIcon(new ImageIcon(image));
        
        }   
    else if (average == 1) {
        Image image = ImageIO.read(new File(star1));
//        image = image.getScaledInstance(starr1.getWidth(), starr1.getHeight(), Image.SCALE_SMOOTH);
        starc1.setIcon(new ImageIcon(image));
        
        } else if (average == 2) {

        Image image = ImageIO.read(new File(star2));

        starc1.setIcon(new ImageIcon(image));
        } else if (average == 3) {

        Image image = ImageIO.read(new File(star3));

        starc1.setIcon(new ImageIcon(image));
        } else if (average == 4) {
        Image image = ImageIO.read(new File(star4));
//       
        starc1.setIcon(new ImageIcon(image));
//        
        
            }
        else if (average == 5){
        Image image = ImageIO.read(new File(star5));
//        image = image.getScaledInstance(starr1.getWidth(), starr1.getHeight(), Image.SCALE_SMOOTH);
        starc1.setIcon(new ImageIcon(image));
        }
    }
    public static int calculateAverage4(List<Integer> ratingList4) {
        if (ratingList4.isEmpty()) {
            return 0; // Handle the case when the list is empty.
        }

        int sum = 0;
        for (int number : ratingList4) {
            sum += number;
        }

        return sum / ratingList4.size(); // The result is an integer.
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(wildlife.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(wildlife.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(wildlife.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(wildlife.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new wildlife().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(wildlife.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(wildlife.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel clientusername;
    private javax.swing.JLabel img1;
    private javax.swing.JLabel img2;
    private javax.swing.JLabel img3;
    private javax.swing.JLabel img4;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JLabel name1;
    private javax.swing.JLabel name2;
    private javax.swing.JLabel name3;
    private javax.swing.JLabel name4;
    private javax.swing.JLabel stara1;
    private javax.swing.JLabel starb1;
    private javax.swing.JLabel starc1;
    private javax.swing.JLabel starr1;
    // End of variables declaration//GEN-END:variables
}
